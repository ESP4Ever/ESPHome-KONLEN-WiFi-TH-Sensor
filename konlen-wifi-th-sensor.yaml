substitutions:
  device_name: "konlen-wifi-th-sensor"
  friendly_name: "KONLEN WiFi TH Sensor"
  project_name: "konlen.wifi-th-sensor"
  project_version: "1.0"

esphome:
  name: "${device_name}"
  friendly_name: "${friendly_name}"
  #name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"


  on_boot:
    priority: -100
    then:
      - lambda: |-
          auto temp = ESP.getResetReason();
          id( reset_reason).publish_state( temp.c_str());

esp8266:
  board: esp_wroom_02
  restore_from_flash: true

preferences:
  flash_write_interval: 1min

# Enable logging
# Levels:
#   - ERROR: ESP_LOGE
#   - WARNING: ESP_LOGW
#   - INFO: ESP_LOGI
#   - DEBUG: ESP_LOGD
#   - VERBOSE: ESP_LOGV
#   - VERY_VERBOSE: ESP_LOGVV
logger:
  level: NONE
  #esp8266_store_log_strings_in_flash: false
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  safe_mode: true
  reboot_timeout: 10min
  num_attempts: 5
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  output_power: 18
  #use_address: 192.168.xxx.xxx
  power_save_mode: LIGHT #NONE LIGHT HIGH
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}
    password: !secret wifi_ap_password

captive_portal:
    
# web_server:
#   port: 80
#   local: true
#   auth:
#     username: !secret web_server_username
#     password: !secret web_server_password

# Time Source
time:
  - platform: homeassistant
    id: homeassistant_time
  # - platform: sntp
  #   id: sntp_time

    on_time:
      # Every x
      - seconds: /1
        #minutes: /5
        then:
          lambda: |-
            id( gn1638_display).print( "        ");

            if( not isnan( id( temperature_sensor).state) ){
              id( gn1638_display).printf( "%5.1f%5.1f", id( temperature_sensor).state, id( humidity_sensor).state);
              //id( gn1638_display).printf( 4, "%5.1f", id( humidity_sensor).state);
            }else{
              //id( gn1638_display).print( "8.8.8.8.8.8.8.8.");
              if ((id( homeassistant_time).now().second % 2) == 0)
                id( gn1638_display).strftime( "%H.%M", id( homeassistant_time).now());
              else
                id( gn1638_display).strftime( "%H%M", id( homeassistant_time).now());
              id( gn1638_display).strftime( 4,"%d.%m", id( homeassistant_time).now());
            }

light:
  # Status LED
  - platform: status_led
    id: led1
    pin:
      number: GPIO16
      inverted: true

  # Display Intensity Control
  - platform: monochromatic
    name: "Display Intensity"
    icon: mdi:contrast-box
    restore_mode: RESTORE_DEFAULT_ON
    gamma_correct: 2
    default_transition_length: 0s
    output: display_intensity

# globals:
#   id: display_buffer
#   type: std::string
#   restore_value: no
#   initial_value: '"8.8.8.8.8.8.8.8."'

external_components:
  - source:
      type: local
      path: local_components
    components: [ tm1638 ]

display:
    platform: tm1638
    id: gn1638_display
    stb_pin: GPIO13
    clk_pin: GPIO12
    dio_pin: GPIO4
    intensity: 1 # 0...7
    #update_interval: 1s
    lambda: |-

####################
#     BUTTONS      #
####################
button:
  - platform: factory_reset
    id: reset_btn
    name: "Reset to Factory Defaults"
    entity_category: "diagnostic"
    disabled_by_default: true

  - platform: safe_mode
    id: safemode_btn
    name: "Safe Mode"
    entity_category: "diagnostic"
    disabled_by_default: true

####################
#      SENSORS     #
####################
sensor:
  # Temperature Sensor
  - platform: dht
    pin: GPIO14
    model: AM2302 # AUTO_DETECT, DHT11, DHT22, DHT22_TYPE2, AM2302, RHT03, SI7021
    update_interval: 15s
    temperature:
      id: temperature_sensor
      name: "Temperature"
      icon: "mdi:thermometer"
      unit_of_measurement: "Â°C"
      device_class: "temperature"
      state_class: "measurement"
      accuracy_decimals: 1
      filters:
      - sliding_window_moving_average:
          window_size: 6
          send_every: 3
      # Blink status LED on update
      on_value:
        then:
          - script.execute: blink_once

    # Relative Humidity Sensor
    humidity:
      id: humidity_sensor
      name: "Relative Humidity"
      icon: "mdi:water-percent"
      unit_of_measurement: "%"
      device_class: "humidity"
      state_class: "measurement"
      accuracy_decimals: 1
      filters:
      - sliding_window_moving_average:
          window_size: 6
          send_every: 3
      # on_value:
      #   then:
      #     - lambda: |-
      #         id( gn1638_display).printf( 4, "%5.1f", x);
  
  # Absolute Humidity Sensor
  - platform: absolute_humidity
    name: "Absolute Humidity"
    temperature: temperature_sensor
    humidity: humidity_sensor
    icon: "mdi:water-opacity"
    unit_of_measurement: "g/m3"
    device_class: "humidity"
    state_class: "measurement"
    accuracy_decimals: 1

  # Diagnostic Sensors
    # System
  - platform: uptime
    name: "Uptime"
    icon: mdi:timer-play-outline
    entity_category: "diagnostic"
    disabled_by_default: true

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    id: wifi_signal_db
    name: "WiFi Signal (dB)"
    icon: mdi:signal
    update_interval: 60s
    entity_category: "diagnostic"
    disabled_by_default: true
  
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal (%)"
    icon: mdi:signal
    filters:
    - lambda: return min( max( 2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    disabled_by_default: true

####################
#  BINARY SENSORS  #
####################
binary_sensor:
# Diagnostic Sensor
  - platform: status
    name: "Status"
    id: connection_status
    entity_category: "diagnostic"
    #disabled_by_default: true

# Hardware Buttons
  # External Button
  - platform: gpio
    id: external_button
    pin:
      number: GPIO5
      inverted: true
    filters:
      - delayed_on_off: 10ms

    on_multi_click:
    - timing:
        - ON for 0s to 2s
      then:
        - script.execute: beep_once
        - lambda: |-
            id( gn1638_display).print( "        ");
            id( gn1638_display).print( "8.8.8.8.8.8.8.8.");
    - timing:
        - ON for 2s to 6.9s
      then:
        - script.execute: beep_once
        - delay: 50ms
        - script.execute: beep_once
        - button.press: safemode_btn
    - timing:
        - ON for at least 10s
      then:
        - script.execute: beep_once
        - delay: 50ms
        - script.execute: beep_once
        - delay: 50ms
        - script.execute: beep_once
        - button.press: reset_btn

  # Internal Button S1
  - platform: gpio
    id: s1_button
    pin:
      number: GPIO2
      inverted: true
    filters:
      - delayed_on_off: 10ms

    on_press:
      then:
        - script.execute: beep_once
        # - lambda: |-
        #     id( gn1638_display).print( "        ");
        #     id( gn1638_display).print( "8.8.8.8.8.8.8.8.");

  # Internal Button S2
  - platform: gpio
    id: s2_button
    pin:
      number: GPIO0
      inverted: true
    filters:
      - delayed_on_off: 10ms

    on_press:
      then:
        - script.execute: beep_once
        # - lambda: |-
        #     id( gn1638_display).print( "        ");
        #     id( gn1638_display).print( "8.8.8.8.8.8.8.8.");

####################
#   TEXT SENSORS   #
####################
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      icon: mdi:ip-network-outline
      entity_category: "diagnostic"

    mac_address:
      name: MAC Address
      entity_category: "diagnostic"

  - platform: template
    id: reset_reason
    name: Reset Reason
    icon: mdi:progress-question
    entity_category: "diagnostic"

####################
#     OUTPUTS      #
####################
output:
  # Active Buzzer
  - platform: gpio
    id: buzzer1
    pin:
      number: GPIO15
      inverted: false

  - platform: template
    id: display_intensity
    type: float
    min_power: 0.1
    max_power: 0.7
    zero_means_zero: true
    write_action:
      then:
        - lambda: |-
            int value = int( round( state * 10));
            ESP_LOGD( "TEST: display", "intensity: %i", value);
            id( gn1638_display).set_intensity( value);

####################
#     SCRIPTS      #
####################
script:
  - id: beep_once
    then:
      - output.turn_on: buzzer1
      - delay: 50ms
      - output.turn_off: buzzer1

  - id: blink_once
    then:
      - light.turn_on: led1
      - delay: 50ms
      - light.turn_off: led1
